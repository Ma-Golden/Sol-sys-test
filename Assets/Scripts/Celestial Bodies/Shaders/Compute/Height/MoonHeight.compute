#pragma kernel CSMain
#include "../../Includes/Craters.cginc"
#include "../../Includes/FractalNoise.cginc"

StructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heights;
uint numVertices;

// Test value for checking working pipeline
float testValue;

// Noise settings
float4 noiseParams_shape[3];
float4 noiseParams_ridge[3];
float4 noiseParams_ridge2[3];

[numthreads(512, 1, 1)]
void CSMain (uint id : SV_DispatchThreadID)
{
    if (id >= numVertices)
    {
        return;
    }
    
    static const float elevationMultiplier = 0.01;
    float3 vertexPos = vertices[id];
    
    // Craters
    float craterDepth = calculateCraterDepth(vertexPos);

    // Lof-freq noise to add deformation to base sphere shape
    float shapeNoise = simpleNoise(vertexPos, noiseParams_shape);
    
    // Ridge noise
    float ridgeNoise = smoothedRidgidNoise(vertexPos, noiseParams_ridge);
    float ridge2 = smoothedRidgidNoise(vertexPos, noiseParams_ridge2);
    
    
    float noiseSum = (shapeNoise + ridgeNoise + ridge2) * elevationMultiplier;
    // float noiseSum = (shapeNoise + ridgeNoise + ridge2) * elevationMultiplier;
   
    // Check ridge mask

    // Test heights    
    //heights[id] = 1 + sin(vertexPos.y * testValue) * 0.05;

    // TEST FORMULA: SET TEST VALUE TO 0 TO NEGATE SIN SECTION
    float finalHeight = 1 + craterDepth + noiseSum + sin(vertexPos.y * testValue);
    heights[id] = finalHeight;
    
}